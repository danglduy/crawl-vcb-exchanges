{# This is a Jinja2 template #}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Currency Exchange Calculator</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <!-- Custom CSS -->
  <style>
    body {
      padding: 20px;
    }

    .table-container {
      margin-top: 30px;
    }

    .total-row {
      font-weight: bold;
      background-color: #f8f9fa;
    }

    .action-buttons {
      margin-top: 20px;
    }

    .form-control:disabled {
      background-color: #f8f9fa;
    }

    .table-responsive {
      overflow-x: auto;
    }

    #refresh-status {
      display: none;
      margin-left: 10px;
    }

    .refresh-timestamp {
      font-size: 0.8rem;
      color: #6c757d;
      margin-top: 5px;
    }

    .spinner-border {
      width: 1rem;
      height: 1rem;
      margin-right: 5px;
    }

    .status-success {
      color: #28a745;
    }

    .status-error {
      color: #dc3545;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Currency Exchange Calculator</h1>
      <div>
        <button type="button" class="btn btn-success" id="refresh-btn">
          <i class="fas fa-sync-alt"></i> Refresh Rates
        </button>
        <span id="refresh-status"></span>
        <div id="last-updated" class="refresh-timestamp">Last updated: <span id="update-time">Initial load</span>
        </div>
      </div>
    </div>

    <div class="table-responsive table-container">
      <table class="table table-bordered" id="exchange-table">
        <thead class="table-light">
          <tr>
            <th>Value</th>
            <th>Currency</th>
            <th>Rate (VND)</th>
            <th>Extra %</th>
            <th>Total (VND)</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="table-body">
          <!-- Rows will be added dynamically -->
        </tbody>
        <tfoot>
          <tr class="total-row">
            <td colspan="4" class="text-end">Grand Total:</td>
            <td id="grand-total">0</td>
            <td></td>
          </tr>
        </tfoot>
      </table>
    </div>

    <div class="action-buttons">
      <button type="button" class="btn btn-primary" id="add-row-btn">Add Row</button>
      <button type="button" class="btn btn-danger" id="clear-all-btn">Clear All</button>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Custom JS -->
  <script>
    // Store currency data from Flask
    let currencies = {{ currencies | tojson }};

    // Function to add a new row to the table
    function addRow() {
      const tableBody = document.getElementById('table-body');
      const rowCount = tableBody.rows.length;
      const rowId = Date.now(); // Use timestamp for unique ID

      const row = document.createElement('tr');
      row.id = `row-${rowId}`;

      // Value input
      const valueCell = document.createElement('td');
      const valueInput = document.createElement('input');
      valueInput.type = 'number';
      valueInput.className = 'form-control value-input';
      valueInput.value = '1';
      valueInput.min = '0';
      valueInput.step = 'any';
      valueInput.addEventListener('input', () => calculateRowTotal(rowId));
      valueCell.appendChild(valueInput);

      // Currency select
      const currencyCell = document.createElement('td');
      const currencySelect = document.createElement('select');
      currencySelect.className = 'form-control currency-select';
      currencySelect.dataset.rowId = rowId;
      currencySelect.addEventListener('change', () => updateRate(rowId));

      // Add options from our currency data
      currencies.forEach(currency => {
        const option = document.createElement('option');
        option.value = currency.code;
        option.textContent = `${currency.code} - ${currency.name}`;
        currencySelect.appendChild(option);
      });

      currencyCell.appendChild(currencySelect);

      // Rate display
      const rateCell = document.createElement('td');
      const rateInput = document.createElement('input');
      rateInput.type = 'text';
      rateInput.className = 'form-control rate-input';
      rateInput.disabled = true;
      rateCell.appendChild(rateInput);

      // Extra percentage input
      const extraCell = document.createElement('td');
      const extraInput = document.createElement('input');
      extraInput.type = 'number';
      extraInput.className = 'form-control extra-input';
      extraInput.value = '0';
      extraInput.min = '-100';
      extraInput.step = 'any';
      extraInput.addEventListener('input', () => calculateRowTotal(rowId));
      extraCell.appendChild(extraInput);

      // Total display
      const totalCell = document.createElement('td');
      const totalInput = document.createElement('input');
      totalInput.type = 'text';
      totalInput.className = 'form-control total-input';
      totalInput.disabled = true;
      totalCell.appendChild(totalInput);

      // Delete button
      const actionCell = document.createElement('td');
      const deleteButton = document.createElement('button');
      deleteButton.className = 'btn btn-sm btn-outline-danger';
      deleteButton.textContent = 'Delete';
      deleteButton.addEventListener('click', () => {
        row.remove();
        calculateGrandTotal();
      });
      actionCell.appendChild(deleteButton);

      // Add all cells to the row
      row.appendChild(valueCell);
      row.appendChild(currencyCell);
      row.appendChild(rateCell);
      row.appendChild(extraCell);
      row.appendChild(totalCell);
      row.appendChild(actionCell);

      // Add row to table
      tableBody.appendChild(row);

      // Initialize the rate and total for this row
      updateRate(rowId);
    }

    // Function to update the rate based on selected currency
    function updateRate(rowId) {
      const row = document.getElementById(`row-${rowId}`);
      if (!row) return;

      const currencySelect = row.querySelector('.currency-select');
      const rateInput = row.querySelector('.rate-input');

      const selectedCurrency = currencySelect.value;
      const currencyData = currencies.find(c => c.code === selectedCurrency);

      if (currencyData) {
        // Format the rate with comma separators
        rateInput.value = formatNumber(currencyData.rate);
        // Recalculate the total
        calculateRowTotal(rowId);
      } else {
        rateInput.value = '';
      }
    }

    // Function to calculate the total for a row
    function calculateRowTotal(rowId) {
      const row = document.getElementById(`row-${rowId}`);
      if (!row) return;

      const valueInput = row.querySelector('.value-input');
      const rateInput = row.querySelector('.rate-input');
      const extraInput = row.querySelector('.extra-input');
      const totalInput = row.querySelector('.total-input');

      const value = parseFloat(valueInput.value) || 0;
      const rate = parseFloat(rateInput.value.replace(/,/g, '')) || 0;
      const extraPercent = parseFloat(extraInput.value) || 0;

      // Calculate total with extra percentage
      const total = value * rate * (1 + extraPercent / 100);

      // Format and display the total
      totalInput.value = formatNumber(total);

      // Update the grand total
      calculateGrandTotal();
    }

    // Function to calculate the grand total
    function calculateGrandTotal() {
      const totalInputs = document.querySelectorAll('.total-input');
      let grandTotal = 0;

      totalInputs.forEach(input => {
        grandTotal += parseFloat(input.value.replace(/,/g, '')) || 0;
      });

      document.getElementById('grand-total').textContent = formatNumber(grandTotal);
    }

    // Format number with commas for thousands
    function formatNumber(number) {
      return number.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
    }

    // Function to refresh exchange rates
    function refreshRates() {
      const refreshBtn = document.getElementById('refresh-btn');
      const refreshStatus = document.getElementById('refresh-status');

      // Disable button and show loading state
      refreshBtn.disabled = true;
      refreshStatus.style.display = 'inline-block';
      refreshStatus.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Refreshing rates...';
      refreshStatus.className = '';

      // Call the refresh API endpoint
      fetch('/api/refresh', {
        method: 'POST'
      })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update the currency data
              currencies = data.currencies;

              // Update UI to show success
              refreshStatus.innerHTML = '<i class="fas fa-check-circle"></i> Rates updated successfully';
              refreshStatus.className = 'status-success';

              // Update the last refreshed timestamp
              updateRefreshTimestamp();

              // Update rates in the current table
              updateTableRates();
            } else {
              // Show error message
              refreshStatus.innerHTML = `<i class="fas fa-exclamation-circle"></i> ${data.message}`;
              refreshStatus.className = 'status-error';
            }
          })
          .catch(error => {
            console.error('Error refreshing rates:', error);
            refreshStatus.innerHTML = '<i class="fas fa-exclamation-circle"></i> Failed to refresh rates';
            refreshStatus.className = 'status-error';
          })
          .finally(() => {
            // Re-enable the button
            refreshBtn.disabled = false;

            // Hide status message after 5 seconds
            setTimeout(() => {
              refreshStatus.style.display = 'none';
            }, 5000);
          });
    }

    // Update all rates in the current table
    function updateTableRates() {
      const currencySelects = document.querySelectorAll('.currency-select');

      currencySelects.forEach(select => {
        const rowId = select.dataset.rowId;
        const selectedCurrency = select.value;

        // Find the new rate for this currency
        const currencyData = currencies.find(c => c.code === selectedCurrency);

        if (currencyData) {
          // Get the rate input for this row
          const row = document.getElementById(`row-${rowId}`);
          if (row) {
            const rateInput = row.querySelector('.rate-input');

            // Update rate and recalculate total
            rateInput.value = formatNumber(currencyData.rate);
            calculateRowTotal(rowId);
          }
        }
      });
    }

    // Update the refresh timestamp
    function updateRefreshTimestamp() {
      const now = new Date();
      const formattedTime = now.toLocaleString();
      document.getElementById('update-time').textContent = formattedTime;
    }

    // Set initial timestamp
    function setInitialTimestamp() {
      const now = new Date();
      const formattedTime = now.toLocaleString();
      document.getElementById('update-time').textContent = formattedTime;
    }

    // Event listeners for buttons
    document.getElementById('add-row-btn').addEventListener('click', addRow);

    document.getElementById('clear-all-btn').addEventListener('click', () => {
      document.getElementById('table-body').innerHTML = '';
      document.getElementById('grand-total').textContent = '0';
    });

    document.getElementById('refresh-btn').addEventListener('click', refreshRates);

    // Initialize the page
    document.addEventListener('DOMContentLoaded', () => {
      addRow();
      setInitialTimestamp();
    });
  </script>
</body>
</html>
